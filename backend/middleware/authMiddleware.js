import jwt from "jsonwebtoken";
import userModel from "../models/userModel.js";

const authMiddlware = async (req, res, next) => {


    try {

        // Get token from Authorization header - Bearer <token>
        const authHeader = req.headers.authorization;

        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return res
                .status(401)
                .json({ success: false, message: "Not Authorized, login again" });
        }

        const token = authHeader.split(" ")[1]; // //"Bearer <token>" → extract token

        // Splits token into 3 parts
        // Does signature verfication and checks if token is expired and return decode payload if valid
        // Return decoded payload
        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        // When you create a JSON Web Token (JWT) using jwt.sign(), it has three main parts:
        // Header - conatins metadata about the token (automatically added by jsonwebtoken):

        // {
        //   "alg": "HS256",
        //   "typ": "JWT"
        // }


        // Payload (you provided this):

        // {
        //   "id": "someUserId"
        // }


        // Signature (generated using process.env.JWT_SECRET):

        // [encrypted signature string]

        // When you decode the token (without verifying), you’ll see something like:

        // {
        //   id: "60a7d9e3f3c2e10015f2b1c9",
        //   iat: 1696612345,
        //   exp: 1696615945
        // }

        // Find user from token payload
        const user = await userModel.findById(decoded.id).select("-password");

        if (!user) {
            return res.status(404).json({ success: false, message: "User not found" });
        }

        // Attach user info to request
        req.user = user // Now req.user._id, req.user.role, etc. are available

        // Header - Auto-generated by jsonwebtoken library
        // Final Payload
        // {
        //     "role": "user",
        //         "email": "admin@company.com",
        //             "iat": 1696000000, // issued at time , automatically added by jwt 
        //                 "exp": 1696003600 // expiry time , automatically added by jwt
        // }
        // Signature - Auto-generated by jsonwebtoken library
        // HMACSHA256(
        //     base64UrlEncode(header) + "." + base64UrlEncode(payload),
        //     process.env.JWT_SECRET
        // )
        // Ensures token integrity: if header or payload is tampered, signature won’t match.

        next()

    } catch (error) {
        console.error("Auth error:", error.message);
        return res.status(401).json({
            success: false,
            message: "Invalid or expired token",
        });
    }

}

export default authMiddlware;